package com.geekbo.training.leetcode.skill;

/**
 *
 * You are given two strings s and t.
 *
 * String t is generated by random shuffling string s and then add one more letter at a random position.
 *
 * Return the letter that was added to t.
 *
 *
 *
 * Example 1:
 *
 * Input: s = "abcd", t = "abcde"
 * Output: "e"
 * Explanation: 'e' is the letter that was added.
 * Example 2:
 *
 * Input: s = "", t = "y"
 * Output: "y"
 *
 */
public class FindTheDifference {
    /**
     * 解题思路：
     * <p>
     * 我们可以通过统计每个字符出现的次数来找出添加的字符。
     * 首先，我们使用一个长度为 26 的数组 count 来统计字符串 s 中每个字符出现的次数。
     * 数组下标表示字符的 ASCII 值减去 'a' 的 ASCII 值，即将字符映射为数组的下标。
     * 然后，我们遍历字符串 t，并对每个字符出现的次数进行统计。
     * 对于每个字符，我们将对应的 count 数组的值减 1。如果出现某个字符的 count 值为负数，表示该字符是额外添加的字符。
     * 最后，我们返回出现 count 值为负数的字符作为结果。
     * <p>
     * 算法复杂度分析：
     * <p>
     * 时间复杂度：需要遍历字符串 s 和 t，因此时间复杂度为 O(n)，其中 n 是字符串的长度。
     * 空间复杂度：需要使用一个长度为 26 的数组来存储字符出现的次数，因此空间复杂度为 O(1)。
     *
     * @param s
     * @param t
     * @return
     */
    public static char findTheDifference(String s, String t) {
        int[] count = new int[26];

        // 遍历字符串 s，统计每个字符出现的次数
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }

        // 遍历字符串 t，对每个字符出现的次数进行统计
        for (char c : t.toCharArray()) {
            count[c - 'a']--;
            // 如果某个字符的计数为负数，表示该字符是额外添加的字符
            if (count[c - 'a'] < 0) {
                return c;
            }
        }

        return ' ';
    }

    public static void main(String[] args) {
        String s1 = "abcd";
        String t1 = "abcde";
        char result1 = findTheDifference(s1, t1);
        System.out.println(result1);
        // 预期输出: 'e'

        String s2 = "";
        String t2 = "y";
        char result2 = findTheDifference(s2, t2);
        System.out.println(result2);
        // 预期输出: 'y'
    }
}
