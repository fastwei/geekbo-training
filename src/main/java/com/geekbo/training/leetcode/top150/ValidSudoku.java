package com.geekbo.training.leetcode.top150;

public class ValidSudoku {

    /**
     *
     * 解题思路：
     *
     * 要确定一个9x9数独是否有效，需要满足以下三个条件：
     *
     * 每一行包含1到9的数字，且不重复。
     * 每一列包含1到9的数字，且不重复。
     * 每个3x3的子格中包含1到9的数字，且不重复。
     * 为了解决这个问题，可以使用以下算法：
     *
     * 创建三个二维布尔数组，分别表示每一行、每一列和每个3x3子格中的数字是否出现过。
     * 遍历整个数独格子，检查每个数字是否满足上述条件。
     * 对于每个数字，检查是否已经在当前行、列和子格中出现过，如果出现过则返回false，否则标记为已经出现。
     * 如果整个遍历过程没有发现重复的数字，返回true，表示数独有效。
     * 算法复杂度：
     *
     * 时间复杂度：该算法只需要遍历一次整个数独格子，因此时间复杂度为O(1)，因为9x9数独的大小是固定的。
     *
     * 空间复杂度：使用了三个二维布尔数组，每个数组的大小是9x9，所以空间复杂度是O(1)，因为布尔数组的大小是固定的，与数独的大小无关。
     *
     * 这个算法是一个非常高效的解决方法，因为它不依赖于数独的大小，而是固定的，因此不会受到输入大小的影响。
     *
     * @param board
     * @return
     */
    public boolean isValidSudoku(char[][] board) {
        // 分别用三个二维数组来检查每行、每列和每个3x3子格的数字是否重复
        boolean[][] rows = new boolean[9][9];
        boolean[][] cols = new boolean[9][9];
        boolean[][] boxes = new boolean[9][9];
        
        for (int row = 0; row < 9; row++) {
            for (int col = 0; col < 9; col++) {
                char digit = board[row][col];
                if (digit != '.') {
                    int num = digit - '1';
                    int boxIndex = (row / 3) * 3 + col / 3;
                    
                    if (rows[row][num] || cols[col][num] || boxes[boxIndex][num]) {
                        return false;
                    }
                    
                    rows[row][num] = true;
                    cols[col][num] = true;
                    boxes[boxIndex][num] = true;
                }
            }
        }
        
        return true;
    }

    public static void main(String[] args) {
        ValidSudoku validSudoku = new ValidSudoku();
        
        char[][] board1 = {
            {'5','3','.','.','7','.','.','.','.'},
            {'6','.','.','1','9','5','.','.','.'},
            {'.','9','8','.','.','.','.','6','.'},
            {'8','.','.','.','6','.','.','.','3'},
            {'4','.','.','8','.','3','.','.','1'},
            {'7','.','.','.','2','.','.','.','6'},
            {'.','6','.','.','.','.','2','8','.'},
            {'.','.','.','4','1','9','.','.','5'},
            {'.','.','.','.','8','.','.','7','9'}
        };
        System.out.println(validSudoku.isValidSudoku(board1)); // 输出 true

        char[][] board2 = {
            {'8','3','.','.','7','.','.','.','.'},
            {'6','.','.','1','9','5','.','.','.'},
            {'.','9','8','.','.','.','.','6','.'},
            {'8','.','.','.','6','.','.','.','3'},
            {'4','.','.','8','.','3','.','.','1'},
            {'7','.','.','.','2','.','.','.','6'},
            {'.','6','.','.','.','.','2','8','.'},
            {'.','.','.','4','1','9','.','.','5'},
            {'.','.','.','.','8','.','.','7','9'}
        };
        System.out.println(validSudoku.isValidSudoku(board2)); // 输出 false
    }
}
